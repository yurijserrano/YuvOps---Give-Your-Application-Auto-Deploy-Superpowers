version: 2.1

# YUVOPS - REFERENCE MATERIAL

# FIND CORRECT AMI BASED ON THE REGION:
# - https://cloud-images.ubuntu.com/locator/

# CIRCLECI REF:
# - https://circleci.com/docs/2.0/env-vars/
# - https://discuss.circleci.com/t/using-environment-variables-inside-circle-yml/2427
# - https://circleci.com/docs/2.0/pipeline-variables/
# - https://circleci.com/docs/2.0/configuration-reference/#the-when-step-requires-version-21
# - https://circleci.com/docs/2.0/notifications/

# DOCKER IMAGES:
# - https://hub.docker.com/_/python
# - https://hub.docker.com/r/amazon/aws-cli

# USEFUL WEB RESOURCES:
# - http://www.yamllint.com
# - https://memstash.io

# AWS - VIDEOS
# - AWS SETUP: https://youtu.be/d1W1HUz8yRw

# CIRCLECI - VIDEOS
# - ENVIRONMENT VARIABLES: https://youtu.be/caFJQ1YwVdU

# PROMETHEUS - VIDEOS
# - PROMETHEUS SETUP: https://youtu.be/PSXrbE54FqQ

# BASH
# SYNTAX - IF THEN ELSE: https://linuxize.com/post/bash-if-else-statement/
# -n flag: https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php
# mkdir -p: https://www.javatpoint.com/linux-mkdir-p
# chmod: https://askubuntu.com/questions/22383/how-to-give-read-write-permission-to-a-folder-and-its-sub-folders-and-files
# ls -ld: https://stackoverflow.com/questions/338037/how-to-check-permissions-of-a-specific-directory

# AWS ERRORS
# - FIX EXPORT NAME ERROR CLOUDFRONT: https://stackoverflow.com/questions/63271865/export-with-name-exrole-is-already-exported-by-stack-root-role


# AWS CLI
#
# INSTALLATION
# - https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html
# - https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-pip
#
# COMMANDS
# - cloudformation: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/index.html
# - deploy: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html
# - s3: https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-buckets-creating
# - create-stack: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html
# - describe-instances: https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html
# - region: https://aws.amazon.com/blogs/infrastructure-and-automation/multiple-account-multiple-region-aws-cloudformation/
# - s3 sync: https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html


# ANSIBLE
#
# - wait_for_connection: https://docs.ansible.com/ansible/2.5/modules/wait_for_connection_module.html
# - hosts & groups: https://docs.ansible.com/ansible/2.3/intro_inventory.html
# - ssh key access: https://superuser.com/questions/1179888/how-can-i-escape-the-message-that-the-authenticity-of-cant-be-established-for-s

# PROMETHEUS PORTS
# - https://github.com/prometheus/prometheus/wiki/Default-port-allocations

commands:
  destroy-yuvops-environment:
    description: YuvOps - Destroy the frontend and backend stacks given the workflow id.
    steps:
      - run:
          name: YuvOps - Destroy yuvops environment
          command: |
            aws s3 rm "s3://yuvops-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "yuvops-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "yuvops-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "" https://api.memstash.io/values/yuvopsurl_${CIRCLE_WORKFLOW_ID:0:7}
            curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "" https://api.memstash.io/values/yuvopsarn_${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  revert-yuvops-migrations:
    description: "YuvOps - Revert the last migration if the process was executed successfully in the current workflow"
    steps:
      - run:
          name: "YuvOps - Revert Migrations"
          when: on_fail
          command: |
            YUVOPS_SUCCESS_MIGRATION=$(curl -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request GET https://api.memstash.io/values/yuvopsmigrations_${CIRCLE_WORKFLOW_ID:0:7})
            echo "RESULT: $YUVOPS_SUCCESS_MIGRATION"
            if (( $YUVOPS_SUCCESS_MIGRATION == "true" ));
            then
              pwd
              ls -l
              cd ~/project/backend
              npm install
              npm run migrations:revert
              echo "MIGRATION HAS BEEN EXECUTED SUCCESSFULLY"
            else
              echo "NO MIGRATIONS ARE PENDING"
            fi

jobs:
  yuvops-ci:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Starting CI process
          command: |
            echo "YuvOps - Starting CI process"

  yuvops-cd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Starting CD process
          command: |
            echo "YuvOps - Starting CD process"

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Install Frontend Dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: YuvOps - Build Frontend
          command: |
            cd frontend
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Install Frontend Dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: YuvOps - Test Frontend
          command: |
            cd frontend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Scan Frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Install Backend Dependencies
          command: |
            cd backend
            npm install
      - run:
          name: YuvOps - Build Backend
          command: |
            cd backend
            npm run build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Install Backend Dependencies
          command: |
            cd backend
            npm install
      - run:
          name: YuvOps - Test Backend
          command: |
            cd backend
            npm run test

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: YuvOps - Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: YuvOps - Ensure that the backend infrastructure exists
          command: |
            cd .circleci/files
            pwd
            ls
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "yuvops-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=yuvops
            YUVOPS_URLS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            echo "YUVOPS_URLS=$YUVOPS_URLS"
            echo "$YUVOPS_URLS"
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "$YUVOPS_URLS" https://api.memstash.io/values/yuvopsurl_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: YuvOps - Ensure that the frontend infrastructure exists
          command: |
            cd .circleci/files
            pwd
            ls
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "yuvops-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=yuvops
              YUVOPS_ARN=$(aws s3 ls | grep yuvops)
              echo "YUVOPS_ARN=$YUVOPS_ARN"
              echo "$YUVOPS_ARN"
              curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "$YUVOPS_ARN" https://api.memstash.io/values/yuvopsarn_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: YuvOps - Ensure that the cloudfront infrastructure exists
          command: |
            cd .circleci/files
            pwd
            ls
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name "yuvops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-yuvops-environment


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - add_ssh_keys:
          fingerprints: ["d7:d3:10:26:b3:5f:8f:e6:f7:86:0d:75:e3:9e:0a:d1"]
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add openssh-client
            pip install awscli
      - run:
          name: "YuvOps - Setting up the inventory file"
          command: |
            cd .circleci/ansible
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
            echo "timeout=20">> ansible.cfg
            cat ansible.cfg

            echo "[web]" >> inventory.txt
            YUVOPS_URLS=$(curl -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request GET https://api.memstash.io/values/yuvopsurl_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$YUVOPS_URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: "YuvOps - Using Ansible to Configure the Server"
          no_output_timeout: 15m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt yuvops-configure-server.yml
      - destroy-yuvops-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:d3:10:26:b3:5f:8f:e6:f7:86:0d:75:e3:9e:0a:d1"]
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            cd backend
            npm install
      - run:
          name: "YuvOps - Performing Database Migration"
          command: |
            sudo chmod -R 777 backend
            ls -ld backend
            cd backend
            touch yuvops_migrations_results.txt
            npm run migrations > yuvops_migrations_results.txt
      - run:
          name: "YuvOps - Saving Migration Status"
          command: |
            cd backend
            cat yuvops_migrations_results.txt
            if grep -q "has been executed successfully" yuvops_migrations_results.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "true" https://api.memstash.io/values/yuvopsmigrations_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "false" https://api.memstash.io/values/yuvopsmigrations_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-yuvops-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: "YuvOps - Retrieving Backend Url"
          command: |
            export YUVOPS_BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://$YUVOPS_BACKEND_IP:3030
            echo "API_URL=$API_URL" > frontend/.env
            echo "${API_URL}"
      - run:
          name: "YuvOps - Deploying Frontend"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm install --save cors
            npm run build
            npm audit fix --audit-level=critical --force
            cd dist
            aws s3 sync . s3://yuvops-"${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-yuvops-migrations
      - destroy-yuvops-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:d3:10:26:b3:5f:8f:e6:f7:86:0d:75:e3:9e:0a:d1"]
      - attach_workspace:
          at: ~/project
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: "YuvOps - Installing Open SSH"
          command: apk add openssh-client
      - run:
          name: "YuvOps - Setting up the Inventory File"
          command: |
            cd .circleci/ansible
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
            echo "timeout=20">> ansible.cfg
            cat ansible.cfg

            echo "[web]" >> inventory.txt
            YUVOPS_URLS=$(curl -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request GET https://api.memstash.io/values/yuvopsurl_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$YUVOPS_URLS"
            echo "$YUVOPS_URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: "YuvOps - Building and Deploying Backend"
          no_output_timeout: 15m
          command: |
            cd backend
            touch .env
            echo ENVIROMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            pwd
            ls -l
            npm install
            npm run build
            npm run prestart:prod
            rm README.md
            rm -rf node_modules
            rm -rf dist
            rm -rf test
            mkdir -p ../.circleci/ansible/roles/deploy/files
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt yuvops-deploy-backend.yml
      - revert-yuvops-migrations
      - destroy-yuvops-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: "YuvOps - Smoke Test Backend"
          command: |
            YUVOPS_BACKEND_IP=$(aws ec2 --region ${AWS_DEFAULT_REGION} describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "YUVOPS BACKEND IP: ${YUVOPS_BACKEND_IP}"
            YUVOPS_BACKEND_URL="http://${YUVOPS_BACKEND_IP}:3030/api/status"
            echo ${YUVOPS_BACKEND_URL}
            sleep 10
            curl ${YUVOPS_BACKEND_URL}
            if curl -s ${YUVOPS_BACKEND_URL} | grep "ok"
            then
              echo "BACKEND TEST: SUCCESS"
              exit 0
            else
              echo "BACKEND TEST: FAIL"
              exit 1
            fi
      - run:
          name: "YuvOps - Smoke Test Frontend"
          command: |
            YUVOPS_FRONTEND_URL="http://yuvops-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-2.amazonaws.com/index.html#/employees"
            echo "YUVOPS FRONTEND URL: ${YUVOPS_FRONTEND_URL}"
            sleep 10
            if curl -s ${YUVOPS_FRONTEND_URL} | grep "Welcome"
            then
              echo "FRONTEND TEST: SUCCESS"
              exit 0
            else
              echo "FRONTEND TEST: FAIL"
              exit 1
            fi
      - revert-yuvops-migrations
      - destroy-yuvops-environment

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: "YuvOps - Installing Dependencies"
          command: |
            apk add --update curl nodejs npm bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ['d7:d3:10:26:b3:5f:8f:e6:f7:86:0d:75:e3:9e:0a:d1']
      - run:
          name: "YuvOps - Add/Update Cloudfront Distribution"
          command: |
            cd .circleci/files
            pwd
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo "OLDWORKFLOWID: ${OldWorkflowID}"
            if [ -n "${OldWorkflowID}" ]
            then
              echo "Update Existing CloudFront Stack"
              aws cloudformation update-stack  \
                --template-file cloudfront.yml \
                --stack-name "yuvops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            fi
            if [ -n "${OldWorkflowID}" ]
            then
              echo "YUVOPS - Removing S3 Bucket and Frontend Stack ${OldWorkflowID}"
              aws s3 rm "s3://yuvops-frontend-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name yuvops-frontend-${OldWorkflowID}

              echo "YUVOPS - Deleting Backend Stack ${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name yuvops-backend-${OldWorkflowID}
            fi
      - revert-yuvops-migrations
      - destroy-yuvops-environment


workflows:
  default:
    jobs:
      - yuvops-ci
      - build-frontend:
          requires:
            - yuvops-ci
      - test-frontend:
          requires:
            - build-frontend
      - scan-frontend:
          requires:
            - test-frontend
      - build-backend:
          requires:
            - scan-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - test-backend
      - yuvops-cd:
          requires:
            - scan-frontend
            - scan-backend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
            - yuvops-cd
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - deploy-frontend
      - smoke-test:
          requires:
            - deploy-backend
      - cloudfront-update:
          requires:
            - smoke-test